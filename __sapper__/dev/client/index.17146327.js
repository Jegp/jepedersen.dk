import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, e as element, a as space, t as text, c as claim_element, b as children, f as claim_space, g as claim_text, h as detach_dev, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, n as set_data_dev, q as query_selector_all, o as noop, p as destroy_each } from './client.a08fa515.js';

/* src/routes/index.svelte generated by Svelte v3.18.1 */

const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (22:4) {#if post.image}
function create_if_block(ctx) {
	let figure;
	let span;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			figure = element("figure");
			span = element("span");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			figure = claim_element(nodes, "FIGURE", { class: true });
			var figure_nodes = children(figure);
			span = claim_element(figure_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			img = claim_element(span_nodes, "IMG", { src: true, alt: true, class: true });
			span_nodes.forEach(detach_dev);
			figure_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*post*/ ctx[1].image)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "");
			attr_dev(img, "class", "svelte-zdf2pb");
			add_location(img, file, 23, 12, 524);
			attr_dev(span, "class", "svelte-zdf2pb");
			add_location(span, file, 23, 6, 518);
			attr_dev(figure, "class", "svelte-zdf2pb");
			add_location(figure, file, 22, 5, 503);
		},
		m: function mount(target, anchor) {
			insert_dev(target, figure, anchor);
			append_dev(figure, span);
			append_dev(span, img);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*posts*/ 1 && img.src !== (img_src_value = /*post*/ ctx[1].image)) {
				attr_dev(img, "src", img_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(figure);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(22:4) {#if post.image}",
		ctx
	});

	return block;
}

// (15:1) {#each posts as post}
function create_each_block(ctx) {
	let li;
	let a;
	let t0;
	let t1_value = /*post*/ ctx[1].title + "";
	let t1;
	let a_href_value;
	let t2;
	let span;
	let t3_value = /*post*/ ctx[1].pubdate + "";
	let t3;
	let t4;
	let if_block = /*post*/ ctx[1].image && create_if_block(ctx);

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			if (if_block) if_block.c();
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			span = element("span");
			t3 = text(t3_value);
			t4 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { rel: true, href: true, class: true });
			var a_nodes = children(a);
			if (if_block) if_block.l(a_nodes);
			t0 = claim_space(a_nodes);
			t1 = claim_text(a_nodes, t1_value);
			a_nodes.forEach(detach_dev);
			t2 = claim_space(li_nodes);
			span = claim_element(li_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t3 = claim_text(span_nodes, t3_value);
			span_nodes.forEach(detach_dev);
			t4 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "href", a_href_value = /*post*/ ctx[1].slug);
			attr_dev(a, "class", "svelte-zdf2pb");
			add_location(a, file, 20, 3, 439);
			attr_dev(span, "class", "date svelte-zdf2pb");
			add_location(span, file, 28, 3, 618);
			attr_dev(li, "class", "svelte-zdf2pb");
			add_location(li, file, 19, 2, 431);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, a);
			if (if_block) if_block.m(a, null);
			append_dev(a, t0);
			append_dev(a, t1);
			append_dev(li, t2);
			append_dev(li, span);
			append_dev(span, t3);
			append_dev(li, t4);
		},
		p: function update(ctx, dirty) {
			if (/*post*/ ctx[1].image) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(a, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*posts*/ 1 && t1_value !== (t1_value = /*post*/ ctx[1].title + "")) set_data_dev(t1, t1_value);

			if (dirty & /*posts*/ 1 && a_href_value !== (a_href_value = /*post*/ ctx[1].slug)) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*posts*/ 1 && t3_value !== (t3_value = /*post*/ ctx[1].pubdate + "")) set_data_dev(t3, t3_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(15:1) {#each posts as post}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let p;
	let t1;
	let t2;
	let br0;
	let t3;
	let br1;
	let t4;
	let h2;
	let t5;
	let t6;
	let ul;
	let each_value = /*posts*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			t0 = space();
			p = element("p");
			t1 = text("Research, thoughts and notes of Jens E. Pedersen. All opinions expressed here are his.");
			t2 = space();
			br0 = element("br");
			t3 = space();
			br1 = element("br");
			t4 = space();
			h2 = element("h2");
			t5 = text("Posts");
			t6 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-oqg1x5\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t1 = claim_text(p_nodes, "Research, thoughts and notes of Jens E. Pedersen. All opinions expressed here are his.");
			p_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			br0 = claim_element(nodes, "BR", {});
			t3 = claim_space(nodes);
			br1 = claim_element(nodes, "BR", {});
			t4 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t5 = claim_text(h2_nodes, "Posts");
			h2_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "J. E. Pedersen";
			attr_dev(p, "class", "svelte-zdf2pb");
			add_location(p, file, 4, 0, 61);
			add_location(br0, file, 8, 0, 158);
			add_location(br1, file, 9, 0, 163);
			attr_dev(h2, "class", "svelte-zdf2pb");
			add_location(h2, file, 11, 0, 169);
			attr_dev(ul, "class", "svelte-zdf2pb");
			add_location(ul, file, 13, 0, 185);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t4, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*posts*/ 1) {
				each_value = /*posts*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params, query }) {
	return this.fetch(`index.json`).then(r => r.json()).then(posts => {
		return { posts };
	});
}

function instance($$self, $$props, $$invalidate) {
	let { posts } = $$props;
	const writable_props = ["posts"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
	};

	$$self.$capture_state = () => {
		return { posts };
	};

	$$self.$inject_state = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
	};

	return [posts];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { posts: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*posts*/ ctx[0] === undefined && !("posts" in props)) {
			console.warn("<Routes> was created without expected prop 'posts'");
		}
	}

	get posts() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set posts(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Routes;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMTcxNDYzMjcuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPkouIEUuIFBlZGVyc2VuPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxwPlxuUmVzZWFyY2gsIHRob3VnaHRzIGFuZCBub3RlcyBvZiBKZW5zIEUuIFBlZGVyc2VuLiBBbGwgb3BpbmlvbnMgZXhwcmVzc2VkIGhlcmUgYXJlIGhpcy5cbjwvcD5cblxuPGJyPlxuPGJyPlxuXG48aDI+UG9zdHM8L2gyPlxuXG48dWw+XG5cdHsjZWFjaCBwb3N0cyBhcyBwb3N0fVxuXHRcdDwhLS0gd2UncmUgdXNpbmcgdGhlIG5vbi1zdGFuZGFyZCBgcmVsPXByZWZldGNoYCBhdHRyaWJ1dGUgdG9cblx0XHRcdFx0dGVsbCBTYXBwZXIgdG8gbG9hZCB0aGUgZGF0YSBmb3IgdGhlIHBhZ2UgYXMgc29vbiBhc1xuXHRcdFx0XHR0aGUgdXNlciBob3ZlcnMgb3ZlciB0aGUgbGluayBvciB0YXBzIGl0LCBpbnN0ZWFkIG9mXG5cdFx0XHRcdHdhaXRpbmcgZm9yIHRoZSAnY2xpY2snIGV2ZW50IC0tPlxuXHRcdDxsaT5cblx0XHRcdDxhIHJlbD0ncHJlZmV0Y2gnIGhyZWY9J3twb3N0LnNsdWd9Jz5cblx0XHRcdFx0eyNpZiBwb3N0LmltYWdlfVxuXHRcdFx0XHRcdDxmaWd1cmU+XG5cdFx0XHRcdFx0XHQ8c3Bhbj48aW1nIHNyYz1cIntwb3N0LmltYWdlfVwiIGFsdD1cIlwiIC8+PC9zcGFuPlxuXHRcdFx0XHRcdDwvZmlndXJlPlxuXHRcdFx0XHR7L2lmfVxuXHRcdFx0XHR7cG9zdC50aXRsZX1cblx0XHRcdDwvYT5cblx0XHRcdDxzcGFuIGNsYXNzPVwiZGF0ZVwiPntwb3N0LnB1YmRhdGV9PC9zcGFuPlxuXHRcdDwvbGk+XG5cdHsvZWFjaH1cbjwvdWw+XG5cbjxzdHlsZT5cblx0ZmlndXJlIGltZyB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cdFx0bWF4LXdpZHRoOiAyMDJweDtcblx0fVxuXG5cdGZpZ3VyZSBzcGFuIHtcblx0XHRhbGlnbi1pdGVtczogZmxleC1lbmQ7XG5cdFx0ZGlzcGxheTogLXdlYmtpdC1ib3g7XG5cdFx0ZGlzcGxheTogLW1vei1ib3g7XG5cdFx0ZGlzcGxheTogLW1zLWZsZXhib3g7XG5cdFx0ZGlzcGxheTogLXdlYmtpdC1mbGV4O1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0ZmxleC13cmFwOiB3cmFwO1xuXHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdGhlaWdodDogMjAycHg7XG5cdFx0d2lkdGg6IDIwMnB4O1xuXHR9XG5cblx0aDIge1xuXHRcdGZvbnQtc2l6ZTogMS44ZW07XG5cdFx0dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcblx0XHRmb250LXdlaWdodDogNjAwO1xuXHRcdG1hcmdpbjogMC4yNWVtIDAgMC4wNjI1ZW07XG5cdH1cblxuXHR1bCwgcCB7XG5cdFx0YWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG5cdFx0ZGlzcGxheTogLXdlYmtpdC1ib3g7XG5cdFx0ZGlzcGxheTogLW1vei1ib3g7XG5cdFx0ZGlzcGxheTogLW1zLWZsZXhib3g7XG5cdFx0ZGlzcGxheTogLXdlYmtpdC1mbGV4O1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0ZmxleC13cmFwOiB3cmFwO1xuXHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdGxpbmUtaGVpZ2h0OiAxLjU7XG5cdFx0bGlzdC1zdHlsZTogbm9uZTtcblx0XHRtYXJnaW46IDAgMCAxZW0gMDtcblx0XHRwYWRkaW5nOiAwO1xuXHR9XG5cblx0dWwgbGkge1xuXHRcdGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcblx0XHRwYWRkaW5nOiAxMXB4O1xuXHRcdHRleHQtYWxpZ246IGNlbnRlcjtcblx0XHR3aWR0aDogMjAycHg7XG5cdH1cblxuXHRsaSBhIHtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0fVxuXG5cdC5kYXRlIHtcblx0XHRmb250LXNpemU6OTAlO1xuXHR9XG5cblx0QG1lZGlhIChtaW4td2lkdGg6IDQ4MHB4KSB7XG5cdFx0aDEge1xuXHRcdFx0Zm9udC1zaXplOiAzZW07XG5cdFx0fVxuXHR9XG48L3N0eWxlPlxuXG5cbjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiPlxuXHRleHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlbG9hZCh7IHBhcmFtcywgcXVlcnkgfSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZmV0Y2goYGluZGV4Lmpzb25gKS50aGVuKHIgPT4gci5qc29uKCkpLnRoZW4ocG9zdHMgPT4ge1xuXHRcdFx0XHRyZXR1cm4geyBwb3N0cyB9O1xuXHRcdFx0fSk7XG5cdFx0fVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG5cdGV4cG9ydCBsZXQgcG9zdHM7XG48L3NjcmlwdD5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZDQXVCdUIsR0FBSSxJQUFDLEtBQUs7Ozs7Ozs7Ozs7Ozs7OztvRUFBVixHQUFJLElBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5QkFHNUIsR0FBSSxJQUFDLEtBQUs7Ozs7O3lCQUVRLEdBQUksSUFBQyxPQUFPOzs7eUJBUDFCLEdBQUksSUFBQyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQ0FEUyxHQUFJLElBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0JBQzVCLEdBQUksSUFBQyxLQUFLOzs7Ozs7Ozs7Ozs7O2dFQUtkLEdBQUksSUFBQyxLQUFLOzt3RUFOYSxHQUFJLElBQUMsSUFBSTs7OztnRUFRZCxHQUFJLElBQUMsT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJBZDNCLEdBQUs7OztnQ0FBVixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkJBQUMsR0FBSzs7OytCQUFWLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQWJnQixPQUFPLEdBQUcsTUFBTSxFQUFFLEtBQUs7UUFDcEMsSUFBSSxDQUFDLEtBQUssZUFBZSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUs7V0FDcEQsS0FBSzs7Ozs7T0FGTixLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
